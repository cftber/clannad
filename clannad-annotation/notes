Meta Annotation: 元注解的作用就是负责注解其他注解

元注解有四种，如下：
1. @Target
    @Target说明了Annotation所修饰的对象范围，用于描述注解的使用范围，即被描述的注解可以用在什么地方
    Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。
    在Annotation类型的声明中使用了@Target可更加明晰其修饰的目标
    @Target取值(ElementType)：
        CONSTRUCTOR：用于描述构造器
        FIELD：用于描述域
        LOCAL_VARIABLE：用于描述局部变量
        METHOD：用于描述方法
        PACKAGE：用于描述包
        PARAMETER：用于描述参数
        TYPE：用于描述类、接口(包括注解类型) 或enum声明

2. @Retention
    @Retention定义了该Annotation的生命周期
    某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）
    @Retention取值来自java.lang.annotation.RetentionPolicy的枚举类型值：
        SOURCE:在源文件中有效（即源文件保留）
        CLASS:在class文件中有效（即class保留）
        RUNTIME:在运行时有效（即运行时保留）

3. @Documented
    @Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。@Documented是一个标记注解，没有成员。

4. @Inherited
    @Inherited 是一个标记注解。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个Annotation将被用于该class的子类。

自定义Annotation：

Java内置Annotation：
1. @Override
    @Override 是一个标记型Annotation，说明了被标注的方法覆盖了父类的方法，起到了断言的作用
2. @Deprecated
    @Deprecated 标记型Annotation，说明被修改的元素已被废弃并不推荐使用，编译器会在该元素上加一条横线以作提示
3. @SuppressWarnnings
    @SuppressWarnnings 用于通知Java编译器关闭对特定类、方法、成员变量、变量初始化的警告。
    常见的警告名为下。
    unchecked 执行了未检查的转换时的警告。例如当使用集合时没有用泛型来指定集合的类型
    finally finally子句不能正常完成时的警告
    fallthrough 当switch程序块直接通往下一种情况而没有break时的警告
    deprecation 使用了弃用的类或者方法时的警告
    seriel 在可序列化的类上缺少serialVersionUID时的警告
    path 在类路径、源文件路径等中有不存在的路径时的警告
    all 对以上所有情况的警告

Annotation与Interface的异同：
    Annotation类型使用关键字@interface而非interface。注意开头的@符号
    Annotataion的方法定义是受限制的。其方法必须声明为无参数、无异常抛出的。这些方法同时也定义了Annotation的成员――方法名即为成员名，而方法返回类型即为成员类型。方法返回类型必须为Java基础类型、Class类型、枚举类型、Annotation类型或者相应的一维数组。方法后面可以使用default关键字和一个默认数值来声明成员的默认值，null不能作为成员默认值。成员一般不能是泛型，只有当其类型是Class时可以使用泛型，因为此方法能够用类型转换将各种类型转换为Class
    Annotation和interface都可以定义常量、静态成员类型，也都可以被实现或者继承