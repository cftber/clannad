多线程编程中的三个核心概念：
原子性--跟数据库事务的原子性概念差不多，即一个操作（有可能包含有多个子操作）要么全部执行（生效），要么全部都不执行（都不生效）
可见性--当多个线程并发访问共享变量时，一个线程对共享变量的修改，其它线程能够立即看到
顺序性--程序执行的顺序按照代码的先后顺序执行

CAS（compare and swap）：
    Java中提供了对应的原子操作类来实现该操作，并保证原子性，其本质是利用了CPU级别的CAS指令。由于是CPU级别的指令，其开销比需要操作系统参与的锁的开销小。AtomicInteger使用方法如下。
    AtomicInteger atomicInteger = new AtomicInteger();
    for(int b = 0; b < numThreads; b++) {
      new Thread(() -> {
        for(int a = 0; a < iteration; a++) {
          atomicInteger.incrementAndGet();
        }
      }).start();
    }

volatile：
保证可见性，当使用volatile修饰某个变量时，它会保证对该变量的修改会立即被更新到内存中

happens-before原则（先行发生原则）：
    传递规则：如果操作1在操作2前面，而操作2在操作3前面，则操作1肯定会在操作3前发生。该规则说明了happens-before原则具有传递性
    锁定规则：一个unlock操作肯定会在后面对同一个锁的lock操作前发生。这个很好理解，锁只有被释放了才会被再次获取
    volatile变量规则：对一个被volatile修饰的写操作先发生于后面对该变量的读操作
    程序次序规则：一个线程内，按照代码顺序执行
    线程启动规则：Thread对象的start()方法先发生于此线程的其它动作
    线程终结原则：线程的终止检测后发生于线程中其它的所有操作
    线程中断规则： 对线程interrupt()方法的调用先发生于对该中断异常的获取
    对象终结规则：一个对象构造先于它的finalize发生